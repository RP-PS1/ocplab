
apiVersion: v1
kind: ConfigMap
metadata:
  name: py-file
data:
  app.py: |
    import http.server as SimpleHTTPServer
    import socketserver as SocketServer
    import logging
    import os

    PORT = int(os.environ.get("PORT", 3000))

    class GetHandler(
        SimpleHTTPServer.SimpleHTTPRequestHandler
    ):

        def do_GET(self):
            logging.error(self.headers)
            SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)


    Handler = GetHandler
    httpd = SocketServer.TCPServer(("", PORT), Handler)

    httpd.serve_forever()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-header
  labels:
    app: test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test
  template:
    metadata:
      labels:
        app: test
    spec:
      containers:
        - name: py-container
          image: "python:3.9.19"
          command: ["python3"]
          args: ["/app.py"]
          volumeMounts:
            - name: py-file
              mountPath: /app.py
              readOnly: false
              subPath: app.py
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            - name: PORT
              valueFrom:
                secretKeyRef:
                  name: app-secret
                  key: port
      volumes:
        - name: py-file
          configMap:
            defaultMode: 420
            name: py-file

---
apiVersion: v1
kind: Service
metadata:
  name: test-svc
spec:
  selector:
    app: test
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 1000
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
data:
  port: ODA4MA==
